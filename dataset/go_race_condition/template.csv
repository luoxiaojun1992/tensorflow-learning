code,label
"var {{placeholder_counter}} int var {{placeholder_wait_group}} sync.WaitGroup func {{placeholder_incr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}} ; i++ { value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value + 1 }} func {{placeholder_decr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value - 1 }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_incr_func}}() go {{placeholder_decr_func}}() {{placeholder_wait_group}}.Wait() fmt.Println(Final {{placeholder_counter}}: {{placeholder_counter}})}",1
"var {{placeholder_counter}} int var {{placeholder_wait_group}} sync.WaitGroup var mu sync.Mutex func {{placeholder_incr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { mu.Lock() value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value + 1 mu.Unlock() }} func {{placeholder_decr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { mu.Lock() value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value - 1 mu.Unlock() }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_incr_func}}() go {{placeholder_decr_func}}() {{placeholder_wait_group}}.Wait() fmt.Println(Final {{placeholder_counter}}: {{placeholder_counter}})}",0
"var {{placeholder_counter}} int var {{placeholder_wait_group}} sync.WaitGroup func {{placeholder_decr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value - 1 }} func {{placeholder_incr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value + 1 }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_incr_func}}() go {{placeholder_decr_func}}() {{placeholder_wait_group}}.Wait() fmt.Println(Final {{placeholder_counter}}: {{placeholder_counter}})}",1
"var {{placeholder_counter}} int var {{placeholder_wait_group}} sync.WaitGroup var mu sync.Mutex func {{placeholder_decr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { mu.Lock() value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value - 1 mu.Unlock() }} func {{placeholder_incr_func}}() { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { mu.Lock() value := {{placeholder_counter}} time.Sleep(time.Millisecond) {{placeholder_counter}} = value + 1 mu.Unlock() }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_incr_func}}() go {{placeholder_decr_func}}() {{placeholder_wait_group}}.Wait() fmt.Println(Final {{placeholder_counter}}: {{placeholder_counter}})}",0
"var {{placeholder_counter}} int var {{placeholder_wait_group}} sync.WaitGroup func {{placeholder_process_num}}(number int) { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { time.Sleep(time.Millisecond) {{placeholder_counter}} = {{placeholder_counter}} + number }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_process_num}}(1) go {{placeholder_process_num}}(-1) {{placeholder_wait_group}}.Wait() fmt.Println(Final Total: {{placeholder_counter}})}",1
"var {{placeholder_counter}} int var {{placeholder_wait_group}} sync.WaitGroup var mu sync.Mutex func {{placeholder_process_num}}(number int) { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { mu.Lock() time.Sleep(time.Millisecond) {{placeholder_counter}} = {{placeholder_counter}} + number mu.Unlock() }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_process_num}}(1) go {{placeholder_process_num}}(-1) {{placeholder_wait_group}}.Wait() fmt.Println(Final Total: {{placeholder_counter}})}",0
"var data []int var {{placeholder_wait_group}} sync.WaitGroup func {{placeholder_append_data_func}}(value int) { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { time.Sleep(time.Millisecond) data = append(data value) }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_append_data_func}}(1) go {{placeholder_append_data_func}}(2) {{placeholder_wait_group}}.Wait() fmt.Println(Final Data: data)}",1
"var data []int var {{placeholder_wait_group}} sync.WaitGroup var mu sync.Mutex func {{placeholder_append_data_func}}(value int) { defer {{placeholder_wait_group}}.Done() for i := {{placeholder_recycle_init}}; i < {{placeholder_recycle}}; i++ { mu.Lock() time.Sleep(time.Millisecond) data = append(data value) mu.Unlock() }} func main() { {{placeholder_wait_group}}.Add(2) go {{placeholder_append_data_func}}(1) go {{placeholder_append_data_func}}(2) {{placeholder_wait_group}}.Wait() fmt.Println(Final Data: data)}",0
